/* eslint-disable no-unused-vars */
/* eslint-disable no-undef */
import React from 'react'
import highlighter from '../src'
import { TConfig, TChilrdenProps } from '../src/types'

let lineIndex = 1
const View = (props: any) => <div {...props} />
const Text = (props: any) => <span {...props} />

const TestComponent = () => null

const config: TConfig = {
  maxChildrenDepth: 5,
  indent: 2,
  whitespaceChar: 'âˆ™',
  components: {
    Root: (props: any) => {
      lineIndex = 1

      return (<div {...props} />)
    },
    Line: ({ children, ...props }: any) => (
      <div {...props}>
        <Text
          style={{ color: '#636363' }}>{String(lineIndex++).padStart(2, '0')} </Text>
        {children}
      </div>
    ),
    ArrayComma: ({ children }: TChilrdenProps) => (
      <Text style={{ color: '#aaa' }}>
        {children}
      </Text>
    ),
    ArrayBracket: ({ children }: TChilrdenProps) => (
      <Text style={{ color: '#b8b165' }}>
        {children}
      </Text>
    ),
    Comment: ({ children }: TChilrdenProps) => (
      <Text style={{ color: '#666' }}>
        {children}
      </Text>
    ),
    CommentBrace: ({ children }: TChilrdenProps) => (
      <Text style={{ color: '#bbb' }}>
        {children}
      </Text>
    ),
    ComponentBracket: ({ children }: TChilrdenProps) => (
      <Text style={{ color: '#e75b5f' }}>
        {children}
      </Text>
    ),
    ComponentName: ({ children }: TChilrdenProps) => (
      <Text style={{ color: '#e7dc70' }}>
        {children}
      </Text>
    ),
    ObjectBrace: ({ children }: TChilrdenProps) => (
      <Text style={{ color: '#b6b3a3' }}>
        {children}
      </Text>
    ),
    ObjectColon: ({ children }: TChilrdenProps) => (
      <Text style={{ color: '#b6b3a3' }}>
        {children}
      </Text>
    ),
    ObjectKey: ({ children }: TChilrdenProps) => (
      <Text style={{ color: '#99b7ff' }}>
        {children}
      </Text>
    ),
    ObjectComma: ({ children }: TChilrdenProps) => (
      <Text style={{ color: '#aaa' }}>
        {children}
      </Text>
    ),
    PropsBrace: ({ children }: TChilrdenProps) => (
      <Text style={{ color: '#e3e6ce' }}>
        {children}
      </Text>
    ),
    PropsEquals: ({ children }: TChilrdenProps) => (
      <Text style={{ color: '#8f6451' }}>
        {children}
      </Text>
    ),
    PropsKey: ({ children }: TChilrdenProps) => (
      <Text style={{ color: '#6f6f8f' }}>
        {children}
      </Text>
    ),
    Quote: ({ children }: TChilrdenProps) => (
      <Text style={{ color: '#aaa' }}>
        {children}
      </Text>
    ),
    ValueBoolean: ({ children }: TChilrdenProps) => (
      <Text style={{ color: '#8f7b4b' }}>
        {children}
      </Text>
    ),
    ValueFunction: ({ children }: TChilrdenProps) => (
      <Text style={{ color: '#3e8f82' }}>
        {children}
      </Text>
    ),
    ValueNull: ({ children }: TChilrdenProps) => (
      <Text style={{ color: '#d6d3d8' }}>
        {children}
      </Text>
    ),
    ValueNumber: ({ children }: TChilrdenProps) => (
      <Text style={{ color: '#748f4c' }}>
        {children}
      </Text>
    ),
    ValueString: ({ children }: TChilrdenProps) => (
      <Text style={{ color: '#376b8f' }}>
        {children}
      </Text>
    ),
    Whitespace: ({ children }: TChilrdenProps) => (
      <Text style={{ color: '#eee' }}>
        {children}
      </Text>
    ),
  },
}

export default [
  {
    name: 'empty',
    element: highlighter(
      TestComponent,
      {},
      config
    ),
  },
  {
    name: 'props',
    element: highlighter(
      TestComponent,
      {
        success: 123,
        warning: true,
        error: null,
        access: undefined,
        title: 'Title',
        config: {
          options: true,
          subConfig: {
            value: null,
          },
          ext: [123, true, { key: 'value' }, [{}]],
        },
        array: [123, true, { key: 'value' }, [{}]],
        onClick: () => {},
        icon: (
          <View><Text><Text>ICON</Text></Text></View>
        ),
      },
      config
    ),
  },
  {
    name: 'children',
    element: highlighter(
      TestComponent,
      {
        children: [
          'content1',
          'content2',
          (<View key="1"><Text>
            conc
            oacao
            <br />
            asdasd
          </Text></View>),
          'content3',
        ],
      },
      config
    ),
  },
  {
    name: 'props children',
    element: highlighter(
      TestComponent,
      {
        success: 123,
        warning: true,
        error: null,
        access: undefined,
        title: 'Title',
        config: {
          options: true,
          subConfig: {
            value: null,
            other: undefined,
          },
          date: new Date('1984'),
        },
        children: [
          'content1',
          'content2',
          (
            <View key="1" style={{ color: 'white' }}>
              <Text><Text><Text>Content</Text></Text></Text>
            </View>
          ),
          'content3',
        ],
      },
      config
    ),
  },
]
