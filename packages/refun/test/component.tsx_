import React from 'react'
import TestRenderer from 'react-test-renderer'
import test from 'blue-tape'
import { createSpy, getSpyCalls } from 'spyfn'
import { component } from '../src'

test('component: props + meta', async (t) => {
  const spy = createSpy(() => null)
  const MyComp = component(spy)('Name', () => null)

  TestRenderer.create(<MyComp foo="value"/>)

  t.deepEquals(
    getSpyCalls(spy),
    [
      [{ foo: 'value' }, { displayName: 'Name' }],
    ],
    'should pass props and meta object'
  )
})

test('component: displayName', async (t) => {
  const MyComp = component(() => null)('Name', () => null)

  TestRenderer.create(<MyComp/>)

  t.equals(MyComp.displayName, 'Name', 'should assign displayName')
})


test('component: one function', async (t) => {
  const spy = createSpy(() => null)
  const MyComp = component(
    () => ({ name: 'value' })
  )('Name', spy)

  TestRenderer.create(<MyComp/>)

  t.deepEquals(
    getSpyCalls(spy),
    [
      [{ name: 'value' }],
    ],
    'should map props'
  )
})

test('component: multiple functions', async (t) => {
  const spy = createSpy(() => null)
  const MyComp = component(
    () => ({ foo: 'foo' }),
    ({ foo }) => ({ bar: `${foo}bar` })
  )('Name', spy)

  TestRenderer.create(<MyComp/>)

  t.deepEquals(
    getSpyCalls(spy),
    [
      [{
        bar: 'foobar',
      }],
    ],
    'should map props'
  )
})
