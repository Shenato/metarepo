import React from 'react'
import TestRenderer from 'react-test-renderer'
import test from 'blue-tape'
import { component, startWithType, mapWithAsyncProps } from '../src'

test('mapWithAsyncProps: initial', async (t) => {
  let promise = null
  const MyComp = component(
    startWithType<{ foo: string }>(),
    mapWithAsyncProps(({ foo }) => {
      promise = Promise.resolve({ bar: foo })

      return promise
    }, ['foo'])
  )('Name', (props) => <span {...props}/>)

  const testRenderer = TestRenderer.create(<MyComp foo="foo"/>)
  const props1 = testRenderer.root.findByType('span').props

  t.deepEquals(
    props1,
    {
      isLoading: true,
      foo: 'foo',
    }
  )

  await promise

  const props2 = testRenderer.root.findByType('span').props

  t.deepEquals(
    props2,
    {
      foo: 'foo',
      isLoading: false,
      bar: 'foo',
    }
  )
})

test('mapWithAsyncProps: unmount', async (t) => {
  let promise = null
  const MyComp = component(
    startWithType<{ foo: string }>(),
    mapWithAsyncProps(({ foo }) => {
      promise = Promise.resolve({ bar: foo })

      return promise
    }, ['foo'])
  )('Name', (props) => <span {...props}/>)

  const testRenderer = TestRenderer.create(<MyComp foo="foo"/>)

  testRenderer.unmount()

  await promise

  t.pass('should not fail')
})
