import React from 'react'
import TestRenderer from 'react-test-renderer'
import test from 'blue-tape'
import { createSpy, getSpyCalls } from 'spyfn'
import { component, startWithType, onMount } from '../src'

test('onMount', async (t) => {
  const unmountSpy = createSpy(() => null)
  const mountSpy = createSpy(() => unmountSpy)
  const MyComp = component(
    startWithType<{ foo: string }>(),
    onMount(mountSpy)
  )('Name', (props) => <span {...props}/>)

  const testRenderer = TestRenderer.create(<MyComp foo="foo"/>)
  const props = testRenderer.root.findByType('span').props

  t.deepEquals(
    props,
    {
      foo: 'foo',
    },
    'should pass props'
  )

  t.deepEquals(
    getSpyCalls(mountSpy),
    [
      [{ foo: 'foo' }],
    ],
    'should call mount'
  )

  t.deepEquals(
    getSpyCalls(unmountSpy),
    [],
    'should not call unmount'
  )

  testRenderer.unmount()

  t.deepEquals(
    getSpyCalls(unmountSpy),
    [
      [],
    ],
    'should call unmount'
  )
})
